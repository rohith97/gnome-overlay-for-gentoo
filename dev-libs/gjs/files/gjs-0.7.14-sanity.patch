This is a combination of 9 squashed commits (squashed to save space, since
the patches keep on modifying the same region of code) and a bit of manual
backporting work, bringing sanity wrt xulrunner and spidermonkey handling to
gjs-0.7.14's configure, and allowing gjs-0.7.14 to correctly build against
spidermonkey-1.8.5.

The patches squashed (along with their commit messages) are the following:

1. Marc-Antoine Perennou <Marc-Antoine@Perennou.com>  2011-04-01 14:55:43
Conditionally adapt to JS_CLASS_TRACE removal

Upstream removed it in http://hg.mozilla.org/mozilla-central/rev/a7784d11c59b

https://bugzilla.gnome.org/show_bug.cgi?id=646471

2. Marc-Antoine Perennou <Marc-Antoine@Perennou.com>  2011-04-01 15:04:57
Conditionally adapt to JS_DestroyScript removal

Upstream changed the behaviour of several things about JSScripts in
http://hg.mozilla.org/mozilla-central/rev/c919a7271ac1

We now have to use a JSObject instead of a JSScript in certain circumstances,
and we no longer have to call JS_DestroyScript which no longer exists

https://bugzilla.gnome.org/show_bug.cgi?id=646471

3. Marc-Antoine Perennou <Marc-Antoine@Perennou.com>  2011-04-28 19:01:03
conditonally adapt to JS_BufferIsCompilableUnit changes

Upstream added an argument to JS_BufferIsCompilableUnit in commit
http://hg.mozilla.org/mozilla-central/rev/a773890b676f
We now have to tell if the bytes are utf8 or not.

https://bugzilla.gnome.org/show_bug.cgi?id=646471

4. Colin Walters <walters@verbum.org>  2011-05-04 14:14:18
Support compilation with standalone mozjs185 release

Adjust the detection logic so that we look for mozjs-185.pc first.  If
we have this, we can skip all kinds of insanity.

See https://bugzilla.mozilla.org/show_bug.cgi?id=628723
for the discussion about creating this release.

https://bugzilla.gnome.org/show_bug.cgi?id=646369

5. Colin Walters <walters@verbum.org>  2011-05-05 12:49:09
JS_CLASS_TRACE is a preprocessor macro, can't use AC_CHECK_LIB

6. Nirbheek Chauhan <nirbheek@gentoo.org>  2011-05-05 19:23:27
build: drop js-config support, xulrunner-1.8/1.9 cruft, etc

* The last working version of mozjs/xulrunner is 1.9.2.x, so drop support for
  everything before that.
* Spidermonkey got a pkg-config file (gnome bug 646369), so we can get rid of
  js-config script support.
* Use AC_CHECK_FUNC instead of AC_CHECK_LIB, which avoids having to guess the
  spidermonkey library name, and is the "preferred" way according to
  gnome bug 646369#c3.

https://bugzilla.gnome.org/show_bug.cgi?id=644971

7. Nirbheek Chauhan <nirbheek@gentoo.org>  2011-05-16 17:44:30
build: pick up the JS library from pkg-config instead of the system one

Add JS_LIBS to gjs_console_LDADD so that the JS library in libdir from
pkg-config is picked up first instead of the library in /usr/lib which may be
from a system install of an older spidermonkey.

https://bugzilla.gnome.org/show_bug.cgi?id=644971

8. Colin Walters <walters@verbum.org>  2011-06-09 13:41:14
Don't set rpath if we're using the standalone libmozjs185

If we set an rpath to $prefix/lib, this causes us to prefer installed
libraries over the just-built ones, effectively subverting the ability
to run uninstalled.

9. Alexandre Rostovtsev <tetromino@gmail.com>  2011-07-28 03:40:49
Make choice of javascript package non-automagic

Add a --with-js-package configure flag to allow selecting which
javascript package to build against, e.g. to force building against
xulrunner on a system that happens to have spidermonkey installed.

By default, the behavior is the same as before (first check for
mozjs185, then for mozilla-js).

https://bugzilla.gnome.org/show_bug.cgi?id=655479
---
 Makefile.am             |   15 +++-
 configure.ac            |  228 +++++++++++++++++++++-------------------------
 gi/keep-alive.c         |   10 ++-
 gjs-internals-1.0.pc.in |    5 +-
 modules/console.c       |   10 ++
 5 files changed, 135 insertions(+), 133 deletions(-)

diff --git a/Makefile.am b/Makefile.am
index a7ecd84..5d340dd 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -69,7 +69,10 @@ libgjs_la_CFLAGS = 		\
 libgjs_la_LDFLAGS = 		\
 	-export-symbols-regex "^[^_]" -version-info 0:0:0	\
 	-no-undefined \
-	-R $(FIREFOX_JS_LIBDIR) -rdynamic
+	-rdynamic
+if HAVE_FIREFOX_JS_LIBDIR
+libgjs_la_LDFLAGS += -R $(FIREFOX_JS_LIBDIR) 
+endif
 libgjs_la_LIBADD = 		\
 	$(GJS_LIBS)
 
@@ -121,9 +124,13 @@ gjs_console_CFLAGS = 		\
 	$(AM_CFLAGS)		\
         $(GOBJECT_CFLAGS)
 gjs_console_LDADD =		\
-         $(GOBJECT_LIBS)           \
-         libgjs.la
-gjs_console_LDFLAGS = -R $(FIREFOX_JS_LIBDIR) -rdynamic
+	$(JS_LIBS)		\
+	$(GOBJECT_LIBS)		\
+	libgjs.la
+gjs_console_LDFLAGS = -rdynamic
+if HAVE_FIREFOX_JS_LIBDIR
+gjs_console_LDFLAGS += -R $(FIREFOX_JS_LIBDIR)
+endif
 gjs_console_SOURCES = gjs/console.c
 
 install-exec-hook:
diff --git a/configure.ac b/configure.ac
index d185ba1..3d41ecd 100644
--- a/configure.ac
+++ b/configure.ac
@@ -91,123 +91,100 @@ m4_define(gobject_required_version, 2.18.0)
 AC_CHECK_HEADERS([malloc.h])
 AC_CHECK_FUNCS(mallinfo)
 
-# Look for Spidermonkey. If js-config exists, use that;
-# otherwise we try some pkgconfig files from various distributions.
-
-AC_ARG_VAR([JS_CONFIG], [The js-config program to use])
-if test "$ac_cv_env_JS_CONFIG_set" != "set"; then
-    AC_PATH_PROG([JS_CONFIG], [js-config], [])
+AC_ARG_WITH([js-package],
+    AS_HELP_STRING([--with-js-package[=@<:@auto/mozjs185/mozilla-js@:>@]],
+                   [Choose JavaScript package: 'mozjs185' (i.e. spidermonkey), 'mozilla-js' (i.e. xulrunner or firefox), or 'auto' (detect automatically)]),
+    [with_js_package=$withval],
+    [with_js_package="auto"])
+
+# First, try separate mozjs185 release
+if test $with_js_package = mozjs185 -o $with_js_package = auto; then
+    AC_MSG_CHECKING([for standalone mozjs185])
+    PKG_CHECK_EXISTS([mozjs185], JS_PACKAGE=mozjs185,)
+    if test x$JS_PACKAGE != x; then
+        FIREFOX_JS_LIBDIR=
+        MOZJS_IS_STANDALONE=yes
+        AC_MSG_RESULT([yes])
+        PKG_CHECK_MODULES(JS, $JS_PACKAGE)
+    else
+        AC_MSG_RESULT([no])
+    fi
 fi
 
-if test -n "$JS_CONFIG"; then
-    JS_CFLAGS="$($JS_CONFIG --cflags)"
-    JS_LIBS="$($JS_CONFIG --libs)"
-    FIREFOX_JS_LIBDIR="$($JS_CONFIG --libdir)"
-    JS_PACKAGE=
-
-    # js-config gives almost usable CFLAGS, we must define one of XP_BEOS,
-    # XP_OS2, XP_WIN or XP_UNIX
-    JS_CFLAGS="$JS_CFLAGS -DXP_UNIX"
-else
-    ## spidermonkey .pc file name varies across distributions and Gecko version
-    ##
-    ## mozilla-js: Gecko 1.9, all distributions
-    ## xulrunner-js: Gecko 1.8 (and earlier?) Debian/Ubuntu
-    ## firefox-js: ???
-    ##
-    ## Checking for mozilla-js first will hopefully get us the newest version
-    ## of spidermonkey.
-    PKG_CHECK_EXISTS([mozilla-js], [JS_PACKAGE=mozilla-js],
-                     [PKG_CHECK_EXISTS([xulrunner-js], [JS_PACKAGE=xulrunner-js], [JS_PACKAGE=firefox-js])])
-
-    PKG_CHECK_MODULES(JS, $JS_PACKAGE)
-
-    ## some flavors of Firefox .pc only set sdkdir, not libdir
-    FIREFOX_JS_SDKDIR=`$PKG_CONFIG --variable=sdkdir $JS_PACKAGE`
-    FIREFOX_JS_LIBDIR=`$PKG_CONFIG --variable=libdir $JS_PACKAGE`
-
-    ## Ubuntu does not set libdir in mozilla-js.pc
-    if test x"$FIREFOX_JS_LIBDIR" = x ; then
-       ## Ubuntu returns xulrunner-devel as the sdkdir, but for the
-       ## libdir we want the runtime location on the target system,
-       ## so can't use -devel.
-       ## The library is in the non-devel directory also.
-       ## Don't ask me why it's in two places.
-       FIREFOX_JS_LIBDIR=`echo "$FIREFOX_JS_SDKDIR" | sed -e 's/-devel//g'`
-
-       if ! test -d "$FIREFOX_JS_LIBDIR" ; then
-           FIREFOX_JS_LIBDIR=
-       fi
+if test $with_js_package = mozilla-js -o $with_js_package = auto; then
+    # If we didn't find mozjs185 (the standalone spidermonkey), look for mozilla-js
+    if test x$JS_PACKAGE = x; then
+        AC_MSG_CHECKING([for mozilla-js 1.9.2])
+        PKG_CHECK_EXISTS([mozilla-js >= 1.9.2], JS_PACKAGE=mozilla-js,)
+        if test x$JS_PACKAGE != x; then
+            AC_MSG_RESULT([yes])
+        else
+            AC_MSG_ERROR([Could not find mozilla-js 1.9.2])
+        fi
+
+        PKG_CHECK_MODULES(JS, $JS_PACKAGE)
+
+        ## some flavors of Firefox .pc only set sdkdir, not libdir
+        FIREFOX_JS_SDKDIR=`$PKG_CONFIG --variable=sdkdir $JS_PACKAGE`
+        FIREFOX_JS_LIBDIR=`$PKG_CONFIG --variable=libdir $JS_PACKAGE`
+
+        ## Ubuntu does not set libdir in mozilla-js.pc
+        if test x"$FIREFOX_JS_LIBDIR" = x; then
+            ## Ubuntu returns xulrunner-devel as the sdkdir, but for the
+            ## libdir we want the runtime location on the target system,
+            ## so can't use -devel.
+            ## The library is in the non-devel directory also.
+            ## Don't ask me why it's in two places.
+            FIREFOX_JS_LIBDIR=`echo "$FIREFOX_JS_SDKDIR" | sed -e 's/-devel//g'`
+            if ! test -d "$FIREFOX_JS_LIBDIR"; then
+                FIREFOX_JS_LIBDIR=
+            fi
+        fi
+
+        if test x"$FIREFOX_JS_LIBDIR" = x; then
+            AC_MSG_ERROR([Could not figure out where the Firefox JavaScript library lives])
+        fi
     fi
 fi
 
-if test x"$FIREFOX_JS_LIBDIR" = x ; then
-   AC_MSG_ERROR([Could not figure out where Firefox JavaScript library lives])
+if test x$JS_PACKAGE = x; then
+    AC_MSG_ERROR([No appropriate JavaScript package found])
 fi
 
-AC_SUBST(JS_PACKAGE)
-AC_SUBST(FIREFOX_JS_LIBDIR)
+echo "Using JS_PACKAGE: $JS_PACKAGE"
+echo "Using JS_CFLAGS: $JS_CFLAGS"
+echo "Using JS_LIBS: $JS_LIBS"
 
-AC_MSG_CHECKING([for mozilla-js >= 1.9.2 ])
-if `$PKG_CONFIG --exists $JS_PACKAGE '>=' 1.9.2`; then
-  AC_MSG_RESULT([yes])
-else
-  AC_MSG_ERROR([$JS_PACKAGE >= 1.9.2 is required])
+AC_SUBST(JS_PACKAGE)
+AM_CONDITIONAL(HAVE_FIREFOX_JS_LIBDIR, test x$FIREFOX_JS_LIBDIR != x)
+if test x$FIREFOX_JS_LIBDIR != x; then
+   GJS_INTERNALS_LIBS="-Wl,--rpath=$FIREFOX_JS_LIBDIR"
 fi
+AC_SUBST(GJS_INTERNALS_LIBS)
+AC_SUBST(FIREFOX_JS_LIBDIR)
 
-AC_CHECK_LIB([mozjs], [JS_GetStringBytes], AC_DEFINE([HAVE_JS_GETSTRINGBYTES], [1], [Define if we still have JS_GetStringBytes]),, [$JS_LIBS])
-AC_CHECK_LIB([mozjs], [JS_GetFunctionName], AC_DEFINE([HAVE_JS_GETFUNCTIONNAME], [1], [Define if we still have JS_GetFunctionName]),, [$JS_LIBS])
-AC_CHECK_LIB([mozjs], [JS_GetStringChars], AC_DEFINE([HAVE_JS_GETSTRINGCHARS], [1], [Define if we still have JS_GetStringChars]),, [$JS_LIBS])
-AC_CHECK_LIB([mozjs], [JS_StrictPropertyStub], AC_DEFINE([HAVE_JS_STRICTPROPERTYSTUB], [1], [Define if we have JS_StrictPropertyStub]),, [$JS_LIBS])
-AC_CHECK_LIB([mozjs], [JS_GetGlobalForScopeChain], AC_DEFINE([HAVE_JS_GETGLOBALFORSCOPECHAIN], [1], [Define if we have JS_GetGlobalForScopeChain]),, [$JS_LIBS])
+saved_CFLAGS=$CFLAGS
+saved_LIBS=$LIBS
+CFLAGS=$JS_CFLAGS
+LIBS=$JS_LIBS
+AC_CHECK_FUNC([JS_GetStringBytes], AC_DEFINE([HAVE_JS_GETSTRINGBYTES], [1], [Define if we still have JS_GetStringBytes]),)
+AC_CHECK_FUNC([JS_GetFunctionName], AC_DEFINE([HAVE_JS_GETFUNCTIONNAME], [1], [Define if we still have JS_GetFunctionName]),)
+AC_CHECK_FUNC([JS_GetStringChars], AC_DEFINE([HAVE_JS_GETSTRINGCHARS], [1], [Define if we still have JS_GetStringChars]),)
+AC_CHECK_FUNC([JS_StrictPropertyStub], AC_DEFINE([HAVE_JS_STRICTPROPERTYSTUB], [1], [Define if we have JS_StrictPropertyStub]),)
+AC_CHECK_FUNC([JS_GetGlobalForScopeChain], AC_DEFINE([HAVE_JS_GETGLOBALFORSCOPECHAIN], [1], [Define if we have JS_GetGlobalForScopeChain]),)
+AC_CHECK_FUNC([JS_DestroyScript], AC_DEFINE([HAVE_JS_DESTROYSCRIPT], [1], [Define if we still have JS_DestroyScript]),)
+AC_CHECK_FUNC([JS_DecodeUTF8], AC_DEFINE([HAVE_JS_DECODEUTF8], [1], [Define if we have JS_DecodeUTF8]),)
+AC_CHECK_FUNC([JS_FreezeObject], AC_DEFINE([HAVE_JS_FREEZEOBJECT], [1], [Define if we have JS_FreezeObject]),)
+AC_CHECK_FUNC([JS_IsScriptFrame], AC_DEFINE([HAVE_JS_ISSCRIPTFRAME], [1], [Define if we have JS_IsScriptFrame]),)
+AC_CHECK_FUNC([JS_EndPC], AC_DEFINE([HAVE_JS_ENDPC], [1], [Define if we have JS_EndPC]),)
+AC_CHECK_FUNC([JS_NewCompartmentAndGlobalObject], AC_DEFINE([HAVE_JS_NEWCOMPARTMENTANDGLOBALOBJECT], [1], [Define if we have JS_NewCompartmentAndGlobalObject]),)
+CFLAGS=$saved_CFLAGS
+LIBS=$saved_LIBS
 
-AC_MSG_CHECKING([for mozilla-js >= 2 ])
-if `$PKG_CONFIG --exists $JS_PACKAGE '>=' 2`; then
-  AC_MSG_RESULT([yes])
+if test x$MOZJS_IS_STANDALONE = xyes || `$PKG_CONFIG --exists $JS_PACKAGE '>=' 2`; then
   AC_DEFINE(HAVE_MOZJS_2, [1], [Define if mozilla-js is at least 2])
-  AC_CHECK_LIB([mozjs], [JS_FreezeObject], AC_DEFINE([HAVE_JS_FREEZEOBJECT], [1], [Define if we have JS_FreezeObject]),
-              , [$JS_LIBS])
-  AC_CHECK_LIB([mozjs], [JS_IsScriptFrame], AC_DEFINE([HAVE_JS_ISSCRIPTFRAME], [1], [Define if we have JS_IsScriptFrame]),
-              , [$JS_LIBS])
-  AC_CHECK_LIB([mozjs], [JS_EndPC], AC_DEFINE([HAVE_JS_ENDPC], [1], [Define if we have JS_EndPC]),
-              , [$JS_LIBS])
-  AC_CHECK_LIB([mozjs], [JS_NewCompartmentAndGlobalObject],
-              AC_DEFINE([HAVE_JS_NEWCOMPARTMENTANDGLOBALOBJECT], [1], [Define if we have JS_NewCompartmentAndGlobalObject]),
-              , [$JS_LIBS])
-
-else
-  AC_MSG_RESULT([no])
 fi
 
-## workaround for Ubuntu Hardy bug where mozilla-js.pc gives CFLAGS
-## -I.../stable while jsapi.h is in .../unstable
-AC_MSG_CHECKING([if SpiderMonkey needs extra compiler flags])
-save_CFLAGS="$CFLAGS"
-CFLAGS="$CFLAGS $JS_CFLAGS"
-AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <jsapi.h>]])],
-    [js_extra_cflags_needed=no],
-    [js_extra_cflags_needed=yes])
-CFLAGS="$save_CFLAGS"
-AC_MSG_RESULT([$js_extra_cflags_needed])
-
-JS_EXTRA_CFLAGS=
-if test "$js_extra_cflags_needed" = yes; then
-    try_cflags="-I`$PKG_CONFIG --variable=includedir $JS_PACKAGE`/unstable"
-    AC_MSG_CHECKING([if $try_cflags works])
-    save_CFLAGS="$CFLAGS"
-    CFLAGS="$CFLAGS $JS_CFLAGS $try_cflags"
-    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <jsapi.h>]])],
-        [AC_MSG_RESULT([yes])
-         JS_EXTRA_CFLAGS="$try_cflags"],
-        [AC_MSG_RESULT([no])])
-    CFLAGS="$save_CFLAGS"
-
-    if test x"$JS_EXTRA_CFLAGS" = x; then
-        AC_MSG_ERROR([Unable to determine extra compiler flags needed])
-    fi
-fi
-AC_SUBST([JS_EXTRA_CFLAGS])
-
 AC_MSG_CHECKING([whether JSLocaleToUnicode takes a const char*])
 save_CFLAGS="$CFLAGS"
 CFLAGS="$CFLAGS $JS_CFLAGS -Wno-unused -Werror"
@@ -228,6 +205,30 @@ if test "$have_jslocale_to_unicode_const" = yes; then
      AC_DEFINE([JS_LOCALETOUNICODE_NEEDS_CONST_CHAR], [1], [Define if JSLocaleToUnicode takes a const char* for its src])
 fi
 
+save_CFLAGS="$CFLAGS"
+CFLAGS="$CFLAGS $JS_CFLAGS"
+AC_MSG_CHECKING([for JS_CLASS_TRACE macro])
+AC_COMPILE_IFELSE(
+    [AC_LANG_PROGRAM(
+        [[
+            #include <jsapi.h>
+	    #ifndef JS_CLASS_TRACE
+	    #error "No JS_CLASS_TRACE"
+	    #endif
+        ]],
+        [[(void) 0;]]
+    )],
+    [have_js_class_trace=yes],
+    [have_js_class_trace=no])
+
+if test "x$have_js_class_trace" = xyes; then
+    AC_MSG_RESULT([yes])
+    AC_DEFINE([HAVE_JS_CLASS_TRACE], [1], [Define if we still have JS_CLASS_TRACE])
+else
+    AC_MSG_RESULT([no])
+fi
+CFLAGS="$save_CFLAGS"
+
 common_packages="gobject-2.0 >= gobject_required_version $JS_PACKAGE"
 gjs_packages="gmodule-2.0 gthread-2.0 $common_packages"
 gjs_gi_packages="gobject-introspection-1.0 >= 0.10.1 $common_packages"
@@ -258,27 +259,6 @@ PKG_CHECK_MODULES([GJSTESTS], [$gjstests_packages])
 GI_DATADIR=$($PKG_CONFIG --variable=gidatadir gobject-introspection-1.0)
 AC_SUBST(GI_DATADIR)
 
-if test x"$JS_PACKAGE" = x; then
-    # if JS_PACKAGE is undefined, pkg-config modules don't include
-    # SpiderMonkey and we need to deal with it ourselves
-    GJS_CFLAGS="$GJS_CFLAGS $JS_CFLAGS"
-    GJS_LIBS="$GJS_LIBS $JS_LIBS"
-    GJS_GI_CFLAGS="$GJS_GI_CFLAGS $JS_CFLAGS"
-    GJS_GI_LIBS="$GJS_GI_LIBS $JS_LIBS"
-    GJS_CAIRO_CFLAGS="$GJS_CAIRO_CFLAGS $JS_CFLAGS"
-    GJS_CAIRO_LIBS="$GJS_CAIRO_LIBS $JS_LIBS"
-    GJS_DBUS_CFLAGS="$GJS_DBUS_CFLAGS $JS_CFLAGS"
-    GJS_DBUS_LIBS="$GJS_DBUS_LIBS $JS_LIBS"
-    GJSTESTS_CFLAGS="$GJSTESTS_CFLAGS $JS_CFLAGS"
-    GJSTESTS_LIBS="$GJSTEST_LIBS $JS_LIBS"
-fi
-
-GJS_CFLAGS="$GJS_CFLAGS $JS_EXTRA_CFLAGS"
-GJS_GI_CFLAGS="$GJS_GI_CFLAGS $JS_EXTRA_CFLAGS"
-GJS_CAIRO_CFLAGS="$GJS_CAIRO_CFLAGS $JS_EXTRA_CFLAGS"
-GJS_DBUS_CFLAGS="$GJS_DBUS_CFLAGS $JS_EXTRA_CFLAGS"
-GJSTESTS_CFLAGS="$GJSTESTS_CFLAGS $JS_EXTRA_CFLAGS"
-
 # readline
 LIBS_no_readline=$LIBS
 
diff --git a/gi/keep-alive.c b/gi/keep-alive.c
index c7149ac..e268eaf 100644
--- a/gi/keep-alive.c
+++ b/gi/keep-alive.c
@@ -184,8 +184,10 @@ keep_alive_trace(JSTracer *tracer,
  */
 static struct JSClass gjs_keep_alive_class = {
     "__private_GjsKeepAlive", /* means "new __private_GjsKeepAlive()" works */
-    JSCLASS_HAS_PRIVATE |
-    JSCLASS_MARK_IS_TRACE, /* TraceOp not MarkOp */
+#ifdef HAVE_JS_CLASS_TRACE
+    JSCLASS_MARK_IS_TRACE | /* TraceOp not MarkOp */
+#endif
+    JSCLASS_HAS_PRIVATE,
     JS_PropertyStub,
     JS_PropertyStub,
     JS_PropertyStub,
@@ -200,7 +202,11 @@ static struct JSClass gjs_keep_alive_class = {
     NULL,
     NULL,
     NULL,
+#ifdef HAVE_JS_CLASS_TRACE
     JS_CLASS_TRACE(keep_alive_trace),
+#else
+    keep_alive_trace,
+#endif
     NULL
 };
 
diff --git a/gjs-internals-1.0.pc.in b/gjs-internals-1.0.pc.in
index 701dd42..f4feb19 100644
--- a/gjs-internals-1.0.pc.in
+++ b/gjs-internals-1.0.pc.in
@@ -8,10 +8,9 @@ datadir=@datadir@
 
 jsdir=@gjsjsdir@
 jsnativedir=@gjsnativedir@
-mozjslibdir=@FIREFOX_JS_LIBDIR@
 
-Cflags: -I${includedir}/gjs-1.0 @JS_EXTRA_CFLAGS@
-Libs: -Wl,--rpath=${mozjslibdir}
+Cflags: -I${includedir}/gjs-1.0
+Libs: @GJS_INTERNALS_LIBS@
 Requires: gjs-1.0 gobject-introspection-1.0 @JS_PACKAGE@
 
 Name: gjs-internals-1.0
diff --git a/modules/console.c b/modules/console.c
index 49f891b..8e20db3 100644
--- a/modules/console.c
+++ b/modules/console.c
@@ -161,7 +161,11 @@ gjs_console_interact(JSContext *context,
 {
     JSObject *object = JS_THIS_OBJECT(context, vp);
     gboolean eof = FALSE;
+#ifdef HAVE_JS_DESTROYSCRIPT
     JSScript *script = NULL;
+#else
+    JSObject *script = NULL;
+#endif
     jsval result;
     JSString *str;
     GString *buffer = NULL;
@@ -192,7 +196,11 @@ gjs_console_interact(JSContext *context,
             g_string_append(buffer, temp_buf);
             g_free(temp_buf);
             lineno++;
+#ifdef HAVE_JS_DECODEUTF8
+        } while (!JS_BufferIsCompilableUnit(context, JS_TRUE, object, buffer->str, buffer->len));
+#else
         } while (!JS_BufferIsCompilableUnit(context, object, buffer->str, buffer->len));
+#endif
 
         script = JS_CompileScript(context, object, buffer->str, buffer->len, "typein",
                                   startline);
@@ -219,8 +227,10 @@ gjs_console_interact(JSContext *context,
         }
 
  next:
+#ifdef HAVE_JS_DESTROYSCRIPT
         if (script)
             JS_DestroyScript(context, script);
+#endif
         g_string_free(buffer, TRUE);
     } while (!eof);
 
-- 
1.7.6

